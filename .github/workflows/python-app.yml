# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
name: Python application
on:
  # Trigger on tag push (original behavior)
  push:
    tags:
      - 'v*.*.*'
  
  # Manual trigger button with optional inputs
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.5.0)'
        required: true
        default: '1.5.0'
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean
      run_tests:
        description: 'Run tests before building'
        required: false
        default: false
        type: boolean
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        include:
          - os: ubuntu-latest
            conan_profile: default
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        # Fetch full history for proper git operations
        fetch-depth: 0
        # Use a token with write permissions for commits
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install conan
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    # Fixed: Handle both tag-based and manual triggers
    - name: Extract version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          # Manual trigger - use input version
          VERSION="${{ github.event.inputs.version }}"
          echo "Using manual version: $VERSION"
        else
          # Tag trigger - extract from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Using tag version: $VERSION"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Update README.md with new version
      run: |
        # Use the environment variable set in previous step
        sed -i "s/xlnt\/[0-9]\+\.[0-9]\+\.[0-9]\+/xlnt\/${VERSION}/g" README.md
    
    - name: Commit updated README.md
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        # Check if there are changes before committing
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "docs: Update version to ${VERSION} in README.md"
        fi
    
    # Fixed: Ensure Conan profile is properly configured
    - name: Setup Conan profile
      run: |
        conan profile detect --force
        echo "=== Conan Profile Information ==="
        conan profile show
        echo "=== Conan Version ==="
        conan --version
        echo "=== Available Profiles ==="
        conan profile list || echo "No custom profiles found"
    
    # Optional: Run tests if requested (only for manual triggers)
    - name: Run tests
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_tests == 'true'
      run: |
        echo "Running tests..."
        # Add your test commands here, for example:
        # python -m pytest tests/
        # Or if you have CMake tests:
        # conan create . --build=missing --test-folder=test_package
    
    - name: Create Conan package
      run: |
        echo "=== Starting Conan package creation ==="
        echo "Working directory: $(pwd)"
        echo "Conan version: $(conan --version)"
        
        # List files in current directory
        echo "=== Current directory contents ==="
        ls -la
        
        # Check if conanfile.py exists and show full content for debugging
        if [ -f "conanfile.py" ]; then
          echo "=== conanfile.py found ==="
          echo "=== FULL conanfile.py content (for debugging) ==="
          cat conanfile.py
          echo "=== END of conanfile.py ==="
          
          # Auto-fix common cmake issues
          echo "=== Auto-fixing cmake issues ==="
          if grep -q "def build" conanfile.py && ! grep -q "cmake = CMake(self)" conanfile.py; then
            echo "Found build() method without cmake object creation - applying auto-fix"
            cp conanfile.py conanfile.py.backup
            
            # Add cmake = CMake(self) after def build method
            sed -i '/def build.*:/a\        cmake = CMake(self)' conanfile.py
            
            echo "=== Applied auto-fix, new build method looks like: ==="
            grep -A 10 "def build" conanfile.py
          else
            echo "No auto-fix needed or cmake object already exists"
          fi
        else
          echo "ERROR: conanfile.py not found!"
          exit 1
        fi
        
        # Create package with verbose output and error handling
        echo "=== Creating Conan package ==="
        conan create . --build=missing -v || {
          echo "ERROR: Conan create failed"
          echo "=== Build method analysis ==="
          echo "Looking for build() method issues..."
          grep -n "def build" conanfile.py || echo "No build method found"
          grep -n "cmake\." conanfile.py || echo "No cmake calls found"
          grep -n "cmake =" conanfile.py || echo "No cmake object creation found"
          echo "=== Conan cache info ==="
          conan cache path "xlnt" || echo "Cache path command failed"
          exit 1
        }
    
    - name: Export Conan package
      run: |
        echo "=== Exporting Conan package ==="
        # Note: In Conan 2.x, export-pkg might have different syntax
        conan export-pkg . -o shared=False || {
          echo "WARN: export-pkg failed, trying alternative approach"
          echo "Package might already be in cache from create step"
          conan list "xlnt/*" || echo "No xlnt packages found in cache"
        }
    
    # Fixed: Correct environment variable usage and improved error handling for Conan 2.x
    - name: Create package archive
      run: |
        echo "=== Creating package archive ==="
        
        # List available packages
        echo "=== Available packages in cache ==="
        conan list "xlnt/*" || {
          echo "ERROR: No xlnt packages found in cache"
          exit 1
        }
        
        # Try to get package path (syntax varies between Conan versions)
        PACKAGE_PATH=""
        
        # Method 1: Try Conan 2.x syntax
        if PACKAGE_PATH=$(conan cache path "xlnt/${VERSION}" 2>/dev/null); then
          echo "Found package using Conan 2.x syntax: $PACKAGE_PATH"
        # Method 2: Try without version
        elif PACKAGE_PATH=$(conan cache path "xlnt" 2>/dev/null); then
          echo "Found package using alternative syntax: $PACKAGE_PATH"
        # Method 3: Manual cache location (fallback)
        else
          echo "WARN: conan cache path command failed, trying manual approach"
          CACHE_BASE="$HOME/.conan2"
          if [ -d "$CACHE_BASE" ]; then
            PACKAGE_PATH=$(find "$CACHE_BASE" -name "*xlnt*" -type d | head -1)
            echo "Found package via manual search: $PACKAGE_PATH"
          fi
        fi
        
        # Verify package path exists
        if [ -z "$PACKAGE_PATH" ] || [ ! -d "$PACKAGE_PATH" ]; then
          echo "ERROR: Could not locate package path"
          echo "Searched locations:"
          echo "- conan cache path xlnt/${VERSION}"
          echo "- conan cache path xlnt"
          echo "- Manual search in $HOME/.conan2"
          
          echo "=== Available cache contents ==="
          find "$HOME/.conan2" -name "*xlnt*" 2>/dev/null || echo "No xlnt files found in cache"
          exit 1
        fi
        
        echo "Using package path: $PACKAGE_PATH"
        
        # Create archive name
        ARCHIVE_NAME="xlnt-${VERSION}-${{ runner.os }}-${{ matrix.arch }}.zip"
        echo "Creating archive: $ARCHIVE_NAME"
        
        # Create the archive
        if [ "${{ runner.os }}" == "Windows" ]; then
          7z a "$ARCHIVE_NAME" "$PACKAGE_PATH"
        else
          zip -r "$ARCHIVE_NAME" "$PACKAGE_PATH"
        fi
        
        # Verify archive was created
        if [ ! -f "$ARCHIVE_NAME" ]; then
          echo "ERROR: Failed to create archive: $ARCHIVE_NAME"
          exit 1
        fi
        
        echo "âœ… Successfully created archive: $ARCHIVE_NAME"
        ls -la "$ARCHIVE_NAME"
    
    # Debug: Show build summary
    - name: Build Summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger Type:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **OS:** ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Architecture:** ${{ matrix.arch }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Conan Profile:** ${{ matrix.conan_profile }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "- **Run Tests:** ${{ github.event.inputs.run_tests }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Create Release:** ${{ github.event.inputs.create_release }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Package:** xlnt-${{ env.VERSION }}-${{ runner.os }}-${{ matrix.arch }}.zip" >> $GITHUB_STEP_SUMMARY
    
    # Conditional: Upload to GitHub Release (always for tags, optional for manual)
    - name: Upload to GitHub Release
      if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      uses: softprops/action-gh-release@v1
      with:
        files: xlnt-${{ env.VERSION }}-${{ runner.os }}-${{ matrix.arch }}.zip
        tag_name: v${{ env.VERSION }}
        name: Release v${{ env.VERSION }}
        draft: false
        prerelease: false
        body: |
          ## Release v${{ env.VERSION }}
          
          **Trigger:** ${{ github.event_name == 'push' && 'Automatic (tag push)' || 'Manual' }}
          **Build Date:** ${{ github.run_id }}
          
          ### Changes
          - Built from ${{ github.event_name == 'push' && github.ref || 'manual trigger' }}
          
          ### Artifacts
          - xlnt-${{ env.VERSION }}-${{ runner.os }}-${{ matrix.arch }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
